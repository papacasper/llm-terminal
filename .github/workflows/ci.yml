name: Cross-Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            shell: bash
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            shell: pwsh
          - os: macos-latest
            target: x86_64-apple-darwin
            shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Lint with Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Test setup scripts (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        echo "Testing setup script execution"
        chmod +x setup_env.sh
        # Test script syntax without actually running setup
        bash -n setup_env.sh

    - name: Test setup scripts (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        echo "Testing PowerShell setup script"
        # Test script syntax
        Get-Command -Name "setup_env.ps1" -ErrorAction SilentlyContinue

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: llm-terminal-${{ matrix.target }}
        path: |
          target/${{ matrix.target }}/release/llm-terminal*
        retention-days: 7

  build-release:
    name: Build Release Binaries
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: llm-terminal
            asset_name: llm-terminal-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: llm-terminal.exe
            asset_name: llm-terminal-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: llm-terminal
            asset_name: llm-terminal-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: llm-terminal
            asset_name: llm-terminal-macos-aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}
        overwrite: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false
